{"version":3,"sources":["CurrentPost.tsx","NextPost.tsx","store/reducer.ts","client/hot.ts","store/index.ts","store/store.ts","store/middleware.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["connect","state","post","posts","currentPost","dispatch","nextPost","type","previousPost","showPost","_ref","react_default","a","createElement","tabIndex","onKeyDown","event","key","Fragment","previewUrl","style","maxHeight","maxWidth","src","title","display","defaultState","isDefined","value","undefined","Response","t","data","children","name","permalink","preview","images","source","url","width","height","resolutions","store","createStore","arguments","length","action","allPosts","concat","filter","postNames","Object","toConsumableArray","Set","map","postsByName","reduce","byName","objectSpread","defineProperty","applyMiddleware","next","fetchMore","lastPost","after","respond","fetch","then","response","json","result","decode","isRight","item","link","console","error","PathReporter","report","hot","getState","window","open","App","className","es","src_CurrentPost","NextPost","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84e3117d.chunk.js","sourcesContent":["import { Post } from \"./types\";\nimport { State } from \"./store/reducer\";\nimport { connect } from \"react-redux\";\nimport React from 'react';\nimport { Dispatch } from \"redux\";\nimport { Action } from \"./store/actions\";\n\ninterface Props {\n    post: Post | null;\n    nextPost: () => void;\n    previousPost: () => void;\n    showPost: () => void;\n}\n\nconst CurrentPost = ({post, nextPost, previousPost, showPost}: Props) => (\n    <div tabIndex={0}\n        onKeyDown={event => {\n            switch (event.key) {\n            case \"ArrowRight\":\n            case \"j\":\n            case \"d\":\n                nextPost();\n                break;\n            case \"ArrowLeft\":\n            case \"k\":\n            case \"a\":\n                previousPost();\n                break;\n            case \" \":\n                showPost();\n                break;\n            }\n        }}>\n        {post && <>\n            {post.previewUrl &&\n                <img style={{maxHeight: '80vh', maxWidth: '100vw'}}\n                     src={post.previewUrl} />}\n            <h1>{post.title}</h1>\n        </>}\n    </div>\n)\n\nconst mapStateToProps = (state: State) => ({\n    post: state.posts[state.currentPost] || null\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>) => ({\n    nextPost() {\n        dispatch({type: \"NextPost\"})\n    },\n    previousPost() {\n        dispatch({type: \"PreviousPost\"})\n    },\n    showPost() {\n        dispatch({type: \"ShowPost\"})\n    }\n  })\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrentPost)","import { State } from \"./store/reducer\";\nimport { connect } from \"react-redux\"\nimport React from \"react\"\n\nexport default connect((state: State) => {\n    const nextPost = state.posts[state.currentPost + 1];\n    return {\n        nextPost: nextPost && nextPost.previewUrl\n    }\n})(({nextPost} : {nextPost: string | undefined}) =>\n    nextPost ? <img style={{display: \"none\"}} src={nextPost}/> : null)","import {Action} from './actions';\nimport {Post} from \"../types\";\n\nexport interface State {\n    posts: (Post | undefined)[];\n    currentPost: number;\n}\n\nconst defaultState: State = {\n    posts: [],\n    currentPost: 0\n}\n\nconst isDefined = <T>(value: T | undefined): value is T => value !== undefined;\n\nexport default (state: State = defaultState, action: Action) => {\n    switch (action.type) {\n        case \"GotPosts\":\n            const allPosts = state.posts.concat(action.posts).filter(isDefined);\n            const postNames = [...new Set(allPosts.map(post => post.name))];\n            const postsByName = allPosts.reduce<{[name: string]: Post | undefined}>(\n                (byName, post) => ({...byName, [post.name]: post}), {}\n            );\n            return {\n                ...state,\n                posts: postNames.map(name => postsByName[name])\n            }\n        case \"NextPost\":\n            return {\n                ...state,\n                currentPost: state.currentPost + 1\n            }\n        case \"PreviousPost\":\n            return {\n                ...state,\n                currentPost: state.currentPost && state.currentPost - 1\n            }\n        default:\n            return state;\n    }\n};","import {Post} from \"../types\"\nimport * as t from 'io-ts';\nimport {PathReporter} from 'io-ts/lib/PathReporter';\n\ntype Response = t.TypeOf<typeof Response>\n\nconst Response = t.type({\n    data: t.type({\n        children: t.array(t.type({\n            data: t.intersection([t.type({\n                name: t.string,\n                title: t.string,\n                permalink: t.string,\n            }), t.partial({\n                preview: t.type({\n                    images: t.array(t.type({\n                        source: t.type({\n                            url: t.string,\n                            width: t.Integer,\n                            height: t.Integer\n                        }),\n                        resolutions: t.array(t.type({\n                            url: t.string,\n                            width: t.Integer,\n                            height: t.Integer\n                        }))\n                    }))\n                })\n            })])}))\n        })\n    })\n\nconst parseResponse = (response: Response): Post[] =>\n    response.data.children.map(item => ({\n        name: item.data.name,\n        title: item.data.title,\n        previewUrl: item.data.preview && item.data.preview.images[0].source.url,\n        link: item.data.permalink,\n    }))\n\nexport default (after?: string) => (respond: (posts: Post[]) => void) => {\n    fetch('https://www.reddit.com/hot.json?raw_json=1' + (after ? `&after=${after}` : ''))\n        .then(response => response.json())\n        .then(data => {\n            const result = Response.decode(data);\n            if (result.isRight()) {\n                respond && respond(parseResponse(result.value))\n            } else {\n                console.error(PathReporter.report(result))\n            }\n        })\n}","import store from \"./store\"\nexport default store","import { Store, createStore, applyMiddleware } from \"redux\";\nimport reducer, { State } from \"./reducer\";\nimport { Action } from \"./actions\";\nimport middleware from \"./middleware\"\n\nconst store: Store<State, Action> =\n    createStore(reducer, applyMiddleware(middleware));\n\nexport default store;","import { MiddlewareAPI, Dispatch } from \"redux\";\nimport { Action } from \"./actions\";\nimport { State } from \"./reducer\";\nimport { Post } from \"../types\";\nimport hot from \"../client/hot\";\n\nexport default (store: MiddlewareAPI<Dispatch<Action>, State>) =>\n    (next: Dispatch<Action>) => {\n        const fetchMore = (posts: (Post | undefined)[]) => {\n            const lastPost = posts[posts.length - 1];\n            const after = lastPost && lastPost.name;\n            hot(after)(posts => store.dispatch({\n                type: \"GotPosts\", posts\n            }))\n        }\n        fetchMore(store.getState().posts)\n        return (action: Action) => {\n            next(action);\n            const state = store.getState();\n            if ((action.type !== \"GotPosts\") &&\n                (!state.posts[state.currentPost] || !state.posts[state.currentPost + 1])) {\n                fetchMore(state.posts);\n            }\n            const currentPost = state.posts[state.currentPost];\n            if (action.type === \"ShowPost\" && currentPost) {\n                window.open(\"https://www.reddit.com\" + currentPost.link, \"_blank\");\n            }\n        }\n    }","import React from 'react';\nimport './App.css';\nimport CurrentPost from './CurrentPost';\nimport NextPost from './NextPost';\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nconst App = () => (\n  <div className=\"App\">\n    <Provider store={store}>\n      <CurrentPost />\n      <NextPost />\n    </Provider>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}